type User {
  userId: ID!
  nickname: String!
  avatarImage: String!
  startClimbingTime: String
  finishClimbingTime: String
  email: String
  registerGyms: [GymInfo]
}

type Creater {
  userId: ID!
  nickname: String!
  avatarImage: String
}

type Gym {
  gymId: ID!
  name: String!
  place: String!
  creater: Creater!
  climbingUser: [User]
}

type Me {
  userId: String!
  nickname: String!
  avatarImage: String!
  startClimbingTime: String
  finishClimbingTime: String
  registerGyms: [GymInfo!]!
}

type Gyms {
  gyms: [Gym]
}

type RegisterGymResponse {
  success: Boolean!
  message: String
  registerGyms: [Gym]
}

type RemoveGymResponse {
  success: Boolean!
  message: String
  registerGyms: [Gym]
}

type EditMeResponse {
  success: Boolean!
  message: String
  me: Me
}

type AddClimbingUserResponse {
  success: Boolean!
  message: String
  climbingUser: [User]
}

type RemoveClimbingUserResponse {
  success: Boolean!
  message: String
  # 難しかったらUserを返すなどする
  climbingUser: [User]
}

type ResetClimbingUserResponse {
  success: Boolean!
  message: String
  climbingUser: [User]
}

type Test {
  text: String
  context: String
}

type GymInfo {
  gymId: ID!
  name: String!
  place: String!
}

type MeResponse {
  me: User
  statusMessage: String
  success: Boolean
}

input CreaterInput {
  userId: String!
  nickname: String!
  avatarImage: String!
}

input GymInput {
  gymId: ID!
  name: String!
  place: String!
}

type Query {
  user(userId: ID): User
  me: Me
  gym(gymId: ID): Gym
  gyms: [Gym!]!
}

type Mutation {
  createUser(nickname: String!, avatarImage: String!): User!
  registerGym(GymInput: GymInput): MeResponse
  removeGym: RemoveGymResponse
  test(text: String, context: String): Test
  addGyms(name: String!, place: String!, CreaterInput: CreaterInput!): Gym
  editMe: EditMeResponse
  addClimbingUser(userId: ID!): AddClimbingUserResponse
  removeClimbingUser(userId: ID!): RemoveClimbingUserResponse
}
