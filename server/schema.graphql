type User {
  userId: ID!
  nickname: String!
  avatarImage: String!
  startClimbingTime: String
  finishClimbingTime: String
  email: String
  registerGyms: [Gym]
}

type Gym {
  gymId: ID!
  name: String!
  place: String!
  creater: User
  climbingUser: [User]
}

type Me {
  userId: String!
  nickname: String!
  avatarImage: String!
  startClimbingTime: String
  finishClimbingTime: String
  registerGyms: [Gym]
}

type Gyms {
  gyms: [Gym]
}

type RegisterGymResponse {
  success: Boolean!
  message: String
  registerGyms: [Gym]
}

type RemoveGymResponse {
  success: Boolean!
  message: String
  registerGyms: [Gym]
}

type EditMeResponse {
  success: Boolean!
  message: String
  me: Me
}

type AddClimbingUserResponse {
  success: Boolean!
  message: String
  # 難しかったらUserを返すなどする
  climbingUser: [User]
}

type RemoveClimbingUserResponse {
  success: Boolean!
  message: String
  # 難しかったらUserを返すなどする
  climbingUser: [User]
}

type ResetClimbingUserResponse {
  success: Boolean!
  message: String
  climbingUser: [User]
}

type Test {
  text: String
  context: String
}

input CreateUserInput {
  nickname: String!
  avatarImage: String!
}

type Query {
  user(userId: ID): User
  me: Me
  gym(gymId: ID): Gym
  gyms: [Gym]
}

type Mutation {
  createUser(nickname: String!, avatarImage: String!): User
  registerGym: RegisterGymResponse
  removeGym: RemoveGymResponse
  test(text: String, context: String): Test
  addGyms(name: String, creater: String, place: String): Gym
  editMe: EditMeResponse
  addClimbingUser(userId: ID!): AddClimbingUserResponse
  removeClimbingUser(userId: ID!): RemoveClimbingUserResponse
}
