type User {
  userId: ID!
  nickname: String!
  avatarImage: String!
  climbingTime: [ClimbingTime]
  email: String
  registerGyms: [GymInfo]
}

type ClimbingUser {
  userId: ID!
  nickname: String!
  avatarImage: String!
  startClimbingTime: String
  finishClimbingTime: String
}

type ClimbingTime {
  gymId: ID
  name: String!
  startClimbingTime: String
  finishClimbingTime: String
}

type Creater {
  userId: ID!
  nickname: String!
  avatarImage: String
}

type Gym {
  gymId: ID!
  name: String!
  place: String!
  creater: Creater!
  climbingUser: [ClimbingUser]
}

type Me {
  userId: ID!
  nickname: String!
  avatarImage: String!
  climbingTime: [ClimbingTime]
  registerGyms: [GymInfo!]!
}

type Gyms {
  gyms: [Gym]
}

enum MutateStatus {
  success
  warning
  error
}

type RegisterGymResponse {
  status: MutateStatus!
  message: String
  registerGyms: [GymInfo]
}

type RemoveGymResponse {
  status: MutateStatus!
  message: String
}

type ClimbingUserResponse {
  status: MutateStatus!
  message: String!
  gym: Gym
}

type ResetClimbingUserResponse {
  status: MutateStatus!
  message: String
}

type GymInfo {
  gymId: ID!
  name: String!
  place: String!
}

type MeResponse {
  me: User
  message: String
  status: MutateStatus!
}

input CreaterInput {
  userId: ID!
  nickname: String!
  avatarImage: String!
}

input RegisterClimbingUserInput {
  gymId: ID!
  name: String!
  userId: ID!
  nickname: String!
  avatarImage: String!
  finishClimbingTime: String!
  startClimbingTime: String!
}

input GymInput {
  gymId: ID!
  name: String!
  place: String!
}

input UserInput {
  nickname: String!
  avatarImage: String!
}

input EditClimbingTimeInput {
  gymId: ID
  startClimbingTime: String
  finishClimbingTime: String
}

type Query {
  user(userId: ID!): User
  me: Me
  gym(gymId: ID): Gym
  gyms: [Gym!]!
}

type Mutation {
  createUser(nickname: String!, avatarImage: String!): User!
  registerGym(GymInput: GymInput): RegisterGymResponse # すでに存在しているジムをダッシュボードに登録する
  unregisterGym(gymId: ID!): RegisterGymResponse
  addGyms(name: String!, place: String!, CreaterInput: CreaterInput!): Gym # ジムを新たに作成する
  removeGym(gymId: ID!): RemoveGymResponse
  editMe(input: UserInput!): MeResponse
  addClimbingUser(input: RegisterClimbingUserInput!): ClimbingUserResponse
  editClimbingUser(input: EditClimbingTimeInput): ClimbingUserResponse
  removeClimbingUser(gymId: ID!): ClimbingUserResponse # ジムに登っているユーザーをユーザーが削除できるようにする
  resetClimbingUser: ResetClimbingUserResponse
}
